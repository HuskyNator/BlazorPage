@page "/Scherm"
<link href="css/hoekje.css" rel="stylesheet">
<div class="Hoekje">

<h1>Scherm</h1>
<h2>GLFW</h2>
    <p>
    Voordat ingegaan kan worden moet voor OpenGL een 'context' bestaan om gebruik van te maken, dit bewaart allerlij informatie van OpenGL, en is dikwijls deel van een scherm.
    Om een scherm te maken moet gebruik gemaakt worden van ofwel systeem specifieke functies of een bibliotheek.
    Een veelgebruikte bibliotheek hiervoor is GLFW (Graphic Libarary FrameWork) welk niet systeemspecifiek is, dit wordt intern geregeld, dit vereenvoudigd alles behoorlijk.
    </p>

<h2>Leeg Scherm</h2>
<div class="twee_luik">
    <div> <!--Tekst-->
        <p>
        Glfw en OpenGL moeten voor gebruik geinitialiseerd worden, eveneens moet GLFW na gebruik getermineerd worden om gebruikt geheugen vrij te maken.
        Dit gebeurt met <code>GLFW.Init()</code>, <code>Gl.Initialize()</code> en <code>GLFW.Terminate()</code>.
        Om het scherm zelf te maken wordt gebruik gemaakt van <code>Glfw.CreateWindow(b, h, n, m, s)</code>, welk vereist:
        </p>
        <ul>
            <li>Een breedte.</li>
            <li>Een hoogte.</li>
            <li>Een naam.</li>
            <li>Een monitor, indien fullscreen gebruikt wordt.</li>
            <li>Een ander scherm, indien meerdere schermen dezelfde 'context' delen.</li>
        </ul>
        <p>
        De instellingen voor dit scherm worden voordat het geschapen wordt aangepast met behulp van <code>WindowHint(hint, waarde)</code>,
        dit geldt ook voor de OpenGL versie welk gebruikt zal worden voor het scherm.
        Om vervolgens dit scherm te gebruiken moet <code>Glfw.MakeContextCurrent(scherm)</code> gebruikt worden.
        Ten slotte zal OpenGl verteld moeten worden over de omvang van het scherm waarop het moet tekenen, dit gebeurt met <code>Gl.ViewPort(x,y,b,h)</code>,
        waarbij x,y de linker onderhoek (oorsprong) van dit scherm beschrijven, en b,h de breedte en hoogte.
        Om gebruik te maken van het hele scherm zou men dus moeten gebruiken: <code>Gl.ViewPort(0,0,800,600)</code>.
        </p>
    </div>
    <div class="afbeelding"> <!--Code-->
        <img src="afbeeldingen/Scherm/scherm.png">
        <p class="onderschrift">Maakt een leeg scherm aan (met OpenGL core 4.3).</p>
    </div>
</div>

<h2>Lus</h2>
<div class="twee_luik">
    <div> <!--Tekst-->
        <p>
            Natuurlijk is het niet de bedoeling een leeg scherm te maken en het daar bij te laten,
            er zal herhaaldelijk iets op het scherm getekend moeten worden. <br>
            Wat is afhankelijk van de toepassing, echter is de basis structuur hetzelfde:
        </p>
        <ul>
            <li>Een lus voorwaarde.</li>
            <li>Programma code (includeert tekenen).</li>
            <li>Buffer wisseling.</li>
            <li>Evenementen verwerken.</li>
        </ul>
    </div>
    <div class="afbeelding">
        <img src="afbeeldingen/Scherm/lus.png">
        <p class="onderschrift">Algemene lus vorm.</p>
    </div>
</div>
    <p>
        Voor de lus wordt dikwijls <code>Glfw.WindowShouldClose(scherm)</code> gebruikt, welk aangeeft of een verzoek tot sluiten is afgegeven (alt+f4 en dergelijke).
    </p>
    <p>
        'Bufferwisseling' is er wegens het normaal gebruikte tweetal kleur 'buffers' ('dempgeheugen'), welk de kleuren van alle pixels op het scherm representeren.
        Het tweetal geheugen voorwerpen wordt steeds afgewisseld op het scherm na het volledig betekenen van de vorige. Dit verzekert dat alles juist en volledig op het scherm getoond wordt.
        Voor een duidelijkere uitleg over het gebruik van een veelvoud geheugenblokken kan men wikipedia bezoeken: <a href="https://en.wikipedia.org/wiki/Multiple_buffering">Multiple_Buffering</a>.
    </p>
    <p>
        Ten slotte worden evenementen verwerkt. GLFW verwerkt hierbij toetsenbord, muis en externe invoer.
        Een voorbeeld is het sluiten van het scherm (Kruisje). Dit wordt verwerkt door GLFW, waardoor <code>WindowShouldClose(scherm)</code> bij voorbeeld waar aangeeft.
        Andere voorbeelden zijn het oproepen van 'callback' (terugroep) functies, welk men zelf kan toevoegen voor bijvoorbeeld muis & toetsenbord invoer.
        Meer hier over op de volgende pagina: <a href="Evenementen">Evenementen</a>.
    </p>
<h2>Achtergrond Tekenen</h2>
<div class="twee_luik">
    <p>
        Een simpel achtergrond kan getekend worden als enkele kleur. Dit door alle kleurbits van het scherm op te schonen, en te vervangen met een soort 'opschoonkleur'.
        Allereerst zetten we een staat met <code>Gl.ClearColor(r,g,b,a)</code>, dit zal de opschoonkleur zijn. Vervolgens gebruiken we deze staat (kleur) met <code>Gl.Clear(ClearBufferMask)</code>.<br>
        Er zijn meerdere stukken geheugen (buffers), welk informatie voor alle pixels opslaan en gebruikt worden door het scherm. De verzameling van deze buffers heet de 'framebuffer' (lijstbuffer).
        Nu is enkel de kleurbuffer van belang.
    </p>
    <div class="afbeelding">
        <img src="afbeeldingen/Scherm/achtergrond.png">
        <p class="onderschrift">
            Teken deel van de lus, welk een achtergrondkleur tekent.
        </p>
    </div>
</div>
</div>